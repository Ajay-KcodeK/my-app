{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","classNameName","style","className","id","type","onClick","border","Navbar","props","href","title","aboutText","placeholder","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","split","length","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88a6be31.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n\r\nconst [myStyle, setMyStyle] = useState( {\r\n    color : 'black',\r\n    backgroundColor : 'white'\r\n});\r\n\r\nconst [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n const toggleStyle = () =>{\r\n    if(myStyle.color == 'black'){\r\n        setMyStyle({\r\n            color : 'white',\r\n            backgroundColor : 'black',\r\n            border: '1px solid white'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n    }\r\n    else{\r\n        setMyStyle({\r\n            color : 'black',\r\n            backgroundColor : 'white'\r\n        })\r\n        setBtnText(\"Enable Dark Mode\")\r\n    }\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <div classNameName=\"container\" style={myStyle}>\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\" style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          > \r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\" style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\" style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div classNameName=\"container my-3\">\r\n      <button onClick={toggleStyle} type=\"button\" classNameName=\"btn btn-primary\">{btntext}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                Contact\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title',\r\n    aboutText: 'About',\r\n  };\r\n  ","import React, { useState } from \"react\";\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n      //  console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLpClick = () =>{\r\n        //  console.log(\"Uppercase was clicked\" + text);\r\n          let newText = text.toLowerCase();\r\n          setText(newText);\r\n      }\r\n    const handleOnChange = (event) =>{\r\n      //  console.log(\"OnChange was clicked\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    // text = \"new text\"; wrong way to change the text\r\n    // setText(\"new text\"); right way to change the text\r\n  return (\r\n      <>\r\n    <div>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-danger mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-warning mx-1\" onClick={handleLpClick}>Convert to Lowercase</button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length } Minutes read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\nlet name = \"Ajay\";\n\nfunction App() {\n  return (\n    // <> </> Use fragment to display multiple tag\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"AboutTextUtils\"/>  */}\n      <Navbar title=\"TextUtils\" />\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter the text to analyze below\"/>\n        <About/>\n      </div>\n      {/* <Navbar/>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}